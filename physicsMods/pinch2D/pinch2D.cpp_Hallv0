/***
 * 
 * physics module for 2D zpinch with m=0 using Ideal MHD 
 * with electron inertia and displacment current (relaxation)
 *
 * dN/dt  + d(r*Mr)/r/dr + d(Mz)/dz = 0
 * dMr/dt + d(r*(Mr*Ur + P))/r/dr -P/r + d(Mr*Uz)/dz = -Jz*By
 * dMz/dt + d(Mz*Uz + P)/dz + d(r*Mz*Ur)/r/dr = Jr*By
 * dS/dt  + d(r*S*Ur)/r/dr +d(S*Uz)/dz = 0  
 * dBy/dt + d(-Ez)/dr + d(Er)/dr = 0
 *
 * dEr/dt = 1/delta0*(Jr0 - Jr)
 * dEz/dt = 1/delta0*(Jz0 - Jz)
 *
 * dJr/dt = 1/epsilon0*[N*(Er - Er0) + lambda0*Jz*By]
 * dJz/dt = 1/epsilon0*[N*(Ez - Ez0) - lambda0*Jr*By]
 *
 * Ez0 = -Ur*By
 * Er0 = Uz*By
 * Jz0 = d(r*By)/r/dr
 * Jr0 = -d(By)/dz
 *
 *
***/

#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <math.h>
#include <cmath>
#include <typeinfo>
#include <algorithm>
#include <mpi.h>
#include <assert.h>
#include <vector>
#include <cmath>

#include "json/json.h"
#include "vectorMath.h"
#include "matrix2D.h"
#include "domainGrid.h"
#include "timeDomain.h"
#include "HDF5dataFile.h"

#include "Physics.h"


using namespace std;

string advScheme0;    // advection differencing scheme
double gamma0;        // adiabatic coefficient
double lambda0, epsilon0, delta0;
int Nsub;             // time-solver subcycle steps
matrix2D<double> N, Mx, Mz, S, By, Ez, Ex, Jz, Jx;  // time-evolving variables
matrix2D<double> P0, deltaP;                    // initial perturbation
matrix2D<double> eta, Cs, Vx, Vz, P, T;     // derived variables
matrix2D<double> Ez0, Jz0, Ex0, Jx0;        // derived variables
matrix2D<double> eta_x, eta_z, Jzcc, Ezcc, Jxcc, VxBy_x, VzBy_z;
matrix2D<double> Nold, Mxold, Mzold, Sold, Byold;
matrix2D<double> Exold, Jxold, Ezold, Jzold;
matrix2D<double> FluxR_x, FluxL_x, FluxRatio_x, FluxLim_x;
matrix2D<double> FluxR_z, FluxL_z, FluxRatio_z, FluxLim_z;  
matrix2D<double> FluxN_x, FluxS_x, FluxMx_x, FluxMz_x, FluxBy_x, FluxEz_x;
matrix2D<double> FluxN_z, FluxS_z, FluxMx_z, FluxMz_z, FluxBy_z, FluxEx_z;

matrix2D<double> Fx, rcc, rce_x;

// Set lower threshold values for N, T, and S
double Nthresh=1.0e-4, Tthresh=2.5e-2, Sthresh;

void computeFluxes(const domainGrid&, const int);
void setXminBoundary(matrix2D<double>&, const double, const double);
void setXminExtrap(matrix2D<double>&, const int);
void setXmaxExtrap(matrix2D<double>&, const int);
void setXmaxBy(matrix2D<double>&, const double);
void setXminBoundaryEz(matrix2D<double>&);
void setXmaxBoundary(matrix2D<double>&, const double, const double);
void setZboundaryPeriodic(matrix2D<double>&);

// alternative means for getting grid, opposed
// to passing predefined instance (Xgrid) to 
// functions
//
//domainGrid* mesh = domainGrid::mesh;
//const int nXg = mesh->nXg;
//cout << "nXg = " << mesh->nXg << endl;
//cout << "mesh->nXcc = " << (*mesh).nXcc << endl;
//cout << "mesh->nXcc = " << mesh->nXcc << endl;


void Physics::initialize(const domainGrid& Xgrid, const Json::Value& root, 
                      HDF5dataFile& dataFile)
{
   int procID, numProcs;
   MPI_Comm_rank (MPI_COMM_WORLD, &procID);
   MPI_Comm_size (MPI_COMM_WORLD, &numProcs);

   //domainGrid* mesh = domainGrid::mesh;
   
   const int nXcc = Xgrid.Xcc.size();
   const int nXce = Xgrid.Xce.size();
   const int nZcc = Xgrid.Zcc.size();
   const int nZce = Xgrid.Zce.size();


   N.initialize(nXcc,nZcc,0.0);
   Nold.initialize(nXcc,nZcc,0.0);
   deltaP.initialize(nXcc,nZcc,0.0);
   P0.initialize(nXcc,nZcc,0.0);
   Mx.initialize(nXcc,nZcc,0.0);
   Mxold.initialize(nXcc,nZcc,0.0);
   Mz.initialize(nXcc,nZcc,0.0);
   Mzold.initialize(nXcc,nZcc,0.0);
   S.initialize(nXcc,nZcc,0.0);
   Sold.initialize(nXcc,nZcc,0.0);
   By.initialize(nXcc,nZcc,0.0);
   Byold.initialize(nXcc,nZcc,0.0);
   P.initialize(nXcc,nZcc,0.0);
   T.initialize(nXcc,nZcc,0.0);
   Cs.initialize(nXcc,nZcc,0.0);
   Vx.initialize(nXcc,nZcc,0.0);
   Vz.initialize(nXcc,nZcc,0.0);
   
   Jz.initialize(nXcc,nZcc,0.0);
   Ez.initialize(nXcc,nZcc,0.0);
   Jz0.initialize(nXcc,nZcc,0.0);
   Ez0.initialize(nXcc,nZcc,0.0);
   Jzold.initialize(nXcc,nZcc,0.0);
   Ezold.initialize(nXcc,nZcc,0.0);
   //
   Jx.initialize(nXcc,nZcc,0.0); 
   Ex.initialize(nXcc,nZcc,0.0);
   Jx0.initialize(nXcc,nZcc,0.0); 
   Ex0.initialize(nXcc,nZcc,0.0);
   Jxold.initialize(nXcc,nZcc,0.0); 
   Exold.initialize(nXcc,nZcc,0.0);

   //
   FluxN_x.initialize(nXce, nZcc, 0.0);
   FluxMx_x.initialize(nXce,nZcc, 0.0);
   FluxMz_x.initialize(nXce,nZcc, 0.0);
   FluxS_x.initialize(nXce, nZcc, 0.0);
   FluxBy_x.initialize(nXce,nZcc, 0.0);
   FluxEz_x.initialize(nXce,nZcc, 0.0);
   
   FluxN_z.initialize(nXcc, nZce, 0.0);
   FluxMx_z.initialize(nXcc,nZce, 0.0);
   FluxMz_z.initialize(nXcc,nZce, 0.0);
   FluxS_z.initialize(nXcc, nZce, 0.0);
   FluxBy_z.initialize(nXcc,nZce, 0.0);
   FluxEx_z.initialize(nXcc,nZce, 0.0);
 
   FluxRatio_x.initialize(nXce,nZcc,0.0);
   FluxLim_x.initialize(nXce,nZcc,0.0);
   FluxR_x.initialize(nXce,nZcc,0.0);
   FluxL_x.initialize(nXce,nZcc,0.0);
   //
   FluxRatio_z.initialize(nXcc,nZce,0.0);
   FluxLim_z.initialize(nXcc,nZce,0.0);
   FluxR_z.initialize(nXcc,nZce,0.0);
   FluxL_z.initialize(nXcc,nZce,0.0);
   
   
   const Json::Value defValue; // used for default reference
   const Json::Value Phys = root.get("Physics",defValue);
   if(Phys.isObject()) {
      if(procID==0) printf("\nInitializing Physics ...\n");
      Json::Value advScheme  = Phys.get("advScheme",defValue);
      Json::Value gammaVal   = Phys.get("gammaC",defValue);
      Json::Value lambdaVal  = Phys.get("lambda",defValue);
      Json::Value epsilonVal = Phys.get("epsilon",defValue);
      Json::Value deltaVal   = Phys.get("delta",defValue);
      Json::Value NsubVal    = Phys.get("Nsub",defValue);
      if(advScheme == defValue || gammaVal == defValue ||
	 NsubVal == defValue ) {
         cout << "ERROR: advScheme or gamma " << endl;
         cout << "or Nsub is " << endl;
         cout << "not declared in input file" << endl;
         exit (EXIT_FAILURE);
      } 
      
      advScheme0 = advScheme.asString();
      if(advScheme0=="C2" || advScheme0=="U1" || 
         advScheme0=="QUICK" || advScheme0=="TVD") {
         if(procID==0) {
            cout << "advection diff/interp scheme is " << advScheme0 << endl;
         }
      }
      else {
         cout << "advection scheme " << advScheme0 << " is not valid " << endl;
         cout << "valid types are C2, U1, QUICK, and TVD " << endl;
         exit (EXIT_FAILURE);
      }

      gamma0 = gammaVal.asDouble();
      if(procID==0) cout << "adiabatic coefficent = " << gamma0 << endl;
      if(gamma0 < 1.0) {
         printf("ERROR: adiabatic coefficient can't be < 1\n");
         exit (EXIT_FAILURE);
      }
      
      lambda0 = lambdaVal.asDouble();
      if(procID==0) cout << "Li/L0 = " << lambda0 << endl;
      if(lambda0 < 0.0) {
         printf("ERROR: ion skin depth must be positive \n");
         exit (EXIT_FAILURE);
      }
      
      epsilon0 = epsilonVal.asDouble();
      if(procID==0) cout << "(Le/L0)^2 = " << epsilon0 << endl;
      if(epsilon0 > 1.0 || epsilon0 < 0.0) {
         printf("ERROR: electron skin depth should not be larger than L0 \n");
         exit (EXIT_FAILURE);
      }
      
      delta0 = deltaVal.asDouble();
      if(procID==0) cout << "(V0/Clight)^2 = " << delta0 << endl;
      if(delta0 > 1.0) {
         printf("ERROR: V0 cannot be larger than speed of light \n");
         exit (EXIT_FAILURE);
      }
      
      Nsub = NsubVal.asInt();
      if(procID==0) cout << "Nsub = " << Nsub << endl;
      if(gamma0 < 1.0) {
         printf("ERROR: Nsub must be int >= 1\n");
         exit (EXIT_FAILURE);
      }
      Sthresh = Nthresh*Tthresh/pow(Nthresh,gamma0-1);
      

   }
   else {
      cout << "value for key \"Physics\" is not object type !" << endl;
      exit (EXIT_FAILURE);
   }
  

   //   get initial profiles for variables
   //
   const Json::Value Pvar = Phys.get("P",defValue);
   if(Pvar.isObject()) { 
      Xgrid.setInitialProfile(P,Pvar);
      if(procID==0) setXminExtrap(P, 0);   
      if(procID==numProcs-1) setXmaxExtrap(P,0); 
      setZboundaryPeriodic(P);  
      Xgrid.communicate(P);
   } else {
      cout << "value for Physics variable \"P\" is not object type !" << endl;
      exit (EXIT_FAILURE);
   }
 
   const Json::Value Tvar = Phys.get("T",defValue);
   if(Tvar.isObject()) { 
      Xgrid.setInitialProfile(T,Tvar);
      //if(procID==0) setXminBoundary(T, 0.0, 1.0);   
      //if(procID==numProcs-1) setXmaxBoundary(T, 0.0, 1.0); 
      setZboundaryPeriodic(T);  
      Xgrid.communicate(T);
   } else {
      cout << "value for Physics variable \"P\" is not object type !" << endl;
      exit (EXIT_FAILURE);
   }

   const Json::Value Byvar = Phys.get("By",defValue);
   if(Byvar.isObject()) { 
      Xgrid.setInitialProfile(By,Byvar);
      if(procID==0) setXminBoundary(By,0.0,-1.0);   
      if(procID==numProcs-1) setXmaxBy(By,-1);
      //if(procID==numProcs-1) setXmaxExtrap(By,2);
      setZboundaryPeriodic(By);  
      Xgrid.communicate(By);
      Byold = By;
   } else {
      cout << "value for Physics variable \"By\" is not object type !" << endl;
      exit (EXIT_FAILURE);
   }
   
   const Json::Value deltaPvar = Phys.get("deltaP",defValue);
   if(deltaPvar.isObject()) { 
      Xgrid.setInitialProfile(deltaP,deltaPvar);
      if(procID==0) setXminExtrap(deltaP, 0);   
      if(procID==numProcs-1) setXmaxExtrap(deltaP,0); 
      setZboundaryPeriodic(deltaP);  
      Xgrid.communicate(deltaP);
   } else {
      cout << "value for Physics variable \"deltaP\" is not object type !" << endl;
      exit (EXIT_FAILURE);
   }

   // create a 2D matrix for r at cell center and at cell edges
   //
   Fx.initialize(nXcc,nZcc,0.0);
   rcc.initialize(nXcc,nZcc,0.0);
   rce_x.initialize(nXce,nZcc,0.0);
   for (auto i=0; i<nXcc; i++) {
      for (auto j=0; j<nZcc; j++) {
	 rcc(i,j) = Xgrid.Xcc.at(i);
	 if(i<nXce) rce_x(i,j) = Xgrid.Xce.at(i);
      }
   }
   
   // calculate current density 
   //
   Xgrid.DDX(Jz,rcc*By); 
   Jz /= rcc;
   setXmaxBoundary(Jz,0.0,0.0);
   Xgrid.communicate(Jz);
   Jz0 = Jz;
   Jzold = Jz;

   N = P/T;
   Nold = N;
   S = P/pow(N,gamma0-1.0);
   Sold  = S;
   Cs = pow(gamma0*P/N + By*By/N,0.5);

   // add perturbation to pressure profile
   //
   P0 = P;
   P *= 1.0+deltaP;
   N = P/T;
   Nold = N;
   S = P/pow(N,gamma0-1.0);
   Sold  = S;
   Cs = pow(gamma0*P/N + By*By/N,0.5);
   
   // set initial electric field from Hall term
   //
   Ex = -lambda0*By/N*Jz;
   Ez =  lambda0*By/N*Jx;
   setXminExtrap(Ez,0);
   setXmaxBoundary(Ez, 0.0, -1.0);   
   Xgrid.communicate(Ez);
  
   computeFluxes(Xgrid, 2); // 1 for first order calculation   


   // add stuff to output files
   //
   dataFile.add(rcc, "rcc", 0);  // force density x-direction 
   dataFile.add(Fx, "Fx", 1);  // force density x-direction 
   dataFile.add(N,  "N",  1);  // density 
   dataFile.add(deltaP,  "deltaP",  0);  // density perturbation 
   dataFile.add(P0,  "P0",  0);  // initial unperturbed pressure profile 
   dataFile.add(Mx, "Mx", 1);  // momentum density 
   dataFile.add(Mz, "Mz", 1);  // momentum density 
   dataFile.add(S,  "S",  1);  // entropy density
   dataFile.add(By, "By", 1);  // magnetic field
   dataFile.add(P, "P", 1);  // pressure
   dataFile.add(T,  "T",  1);  // temperature
   dataFile.add(Vx, "Vx", 1);  // x-velocity
   dataFile.add(Vz, "Vz", 1);  // z-velocity
   dataFile.add(Jz, "Jz", 1);  // current density
   dataFile.add(Ez, "Ez", 1);  // z-electric field
   dataFile.add(Jx, "Jx", 1);  // current density
   dataFile.add(Ex, "Ex", 1);  // x-electric field
   dataFile.add(Jz0, "Jz0", 1);  // current density
   dataFile.add(Ez0, "Ez0", 1);  // z-electric field
   dataFile.add(Jx0, "Jx0", 1);  // current density
   dataFile.add(Ex0, "Ex0", 1);  // x-electric field
   dataFile.add(Cs, "Cs", 1);  // sound speed
   dataFile.add(gamma0,"gamma0",0); 
   dataFile.add(lambda0,"lambda0",0);   // Li/L0 
   dataFile.add(epsilon0,"epsilon0",0); // (Le/L0)^2
   dataFile.add(delta0,"delta0",0);     // (V0/C)^2
   //
   dataFile.add(FluxN_x,  "FluxN_x",  1);  
   dataFile.add(FluxMx_x, "FluxMx_x", 1);  
   dataFile.add(FluxMz_x, "FluxMz_x", 1);  
   dataFile.add(FluxS_x,  "FluxS_x",  1);  
   dataFile.add(FluxBy_x, "FluxBy_x", 1);  
   dataFile.add(FluxEz_x, "FluxEz_x", 1);  
   dataFile.add(FluxEx_z, "FluxEx_z", 1);  
   //
   dataFile.add(FluxRatio_x, "FluxRatio_x", 1);  
   dataFile.add(FluxLim_x, "FluxLim_x", 1);  
   dataFile.add(FluxR_x, "FluxR_x", 1);
   dataFile.add(FluxL_x, "FluxL_x", 1);

} // end Physics.initilize


void Physics::advance(const domainGrid& Xgrid, const double dt)
{
   const int nXcc = Xgrid.nXcc;
   const int nXg = Xgrid.nXg;
   const int nZcc = Xgrid.nZcc;
   const int nZg = Xgrid.nZg;
   
   vector<double> Xcc, Xce;
   Xcc = Xgrid.Xcc;
   Xce = Xgrid.Xce;

   int procID, numProcs;
   MPI_Comm_rank (MPI_COMM_WORLD, &procID);
   MPI_Comm_size (MPI_COMM_WORLD, &numProcs);

   //domainGrid* mesh = domainGrid::mesh;

   // Explicit forward advance from n to n+1 using subcycling in time 
   //  
   double thisdt;
   for (auto n=1; n<Nsub+1; n++) {
      thisdt = dt*n/Nsub;

      // Update N, M, S, and B terms from n to n+1
      for (auto i=nXg; i<nXcc-nXg; i++) {
         for (auto j=nZg; j<nZcc-nZg; j++) {
	 
         Fx(i,j) = - (FluxMx_x(i,j)-FluxMx_x(i-1,j))/Xcc.at(i)/Xgrid.dX
		   + P(i,j)/Xcc.at(i) - Jz(i,j)*By(i,j);
	 if(procID==numProcs-1 && i==nXcc-nXg-1) Fx(i,j) = Fx(i-1,j)/3.0;
	 //if(i==nXcc-nXg-1) Fx(i,j) = 2.0*Fx(i-1,j)-Fx(i-2,j); // doesn't work well

	 N(i,j)  = Nold(i,j)  - thisdt*(FluxN_x(i,j)  - FluxN_x(i-1,j))/Xcc.at(i)/Xgrid.dX
	                      - thisdt*(FluxN_z(i,j)  - FluxN_z(i,j-1))/Xgrid.dZ;
         Mx(i,j) = Mxold(i,j) + thisdt*Fx(i,j)
                              - thisdt*(FluxMx_z(i,j) - FluxMx_z(i,j-1))/Xgrid.dZ;
         Mz(i,j) = Mzold(i,j) - thisdt*(FluxMz_x(i,j) - FluxMz_x(i-1,j))/Xcc.at(i)/Xgrid.dX
                              - thisdt*(FluxMz_z(i,j) - FluxMz_z(i,j-1))/Xgrid.dZ
                              + thisdt*Jx(i,j)*By(i,j);
         S(i,j)  = Sold(i,j)  - thisdt*(FluxS_x(i,j)  - FluxS_x(i-1,j))/Xcc.at(i)/Xgrid.dX
                              - thisdt*(FluxS_z(i,j)  - FluxS_z(i,j-1))/Xgrid.dZ;
         
	 By(i,j) = Byold(i,j) - thisdt*(FluxBy_x(i,j) - FluxBy_x(i-1,j))/Xgrid.dX
	                      - thisdt*(FluxBy_z(i,j) - FluxBy_z(i,j-1))/Xgrid.dZ;
	 
	 //if(N(i,j)<=Nthresh) N(i,j) = Nthresh;
	 //if(M(i,j)<0.0) M(i,j) = 0.0;
	 //if(S(i,j)<=Sthresh) S(i,j) = Sthresh;

         }
      }

      timeDomain* tmesh = timeDomain::tmesh;
      //cout << "thist = " << tmesh->tSim << endl;
      //double thist = tmesh->tSim;
      
      if(procID==0) {
         setXminExtrap(N, 0);   
         setXminBoundary(Mx,0.0,-1.0);   
         setXminExtrap(Mz,0);   
         setXminExtrap(S,0);
         setXminBoundary(By,0.0,-1.0);   
      }
     
      if(procID==numProcs-1) {
         setXmaxBoundary(Mx, 0.0, -1.0);   
         setXmaxExtrap(N, 0);   
         setXmaxExtrap(Mz, 0);   
         setXmaxExtrap(S, 0);   
         setXmaxBy(By,-1);
      }
      setZboundaryPeriodic(N);
      setZboundaryPeriodic(Mx);
      setZboundaryPeriodic(Mz);
      setZboundaryPeriodic(S);
      setZboundaryPeriodic(By);
      //
      Xgrid.communicate(Fx);
      Xgrid.communicate(N);
      Xgrid.communicate(Mx);
      Xgrid.communicate(Mz);
      Xgrid.communicate(S);
      Xgrid.communicate(By);


      // Now update E and J, which are done implicitly
      //
      Xgrid.DDX(Jz0,rcc*By); 
      Jz0 /= rcc;
      setXmaxBoundary(Jz0,0.0,0.0);
      Xgrid.communicate(Jz0);
      //Jz = Jz0;
   
      Xgrid.DDZ(Jx0,By);
      Xgrid.communicate(Jx0);
      Jx0 *= -1.0; 
      //Jx = Jx0;   

      Ez0 = -Vx*By;
      Ex0 = Vz*By;

      double a, b, c, d, e, f, detA;

      for (auto i=nXg; i<nXcc-nXg; i++) {
         for (auto j=nZg; j<nZcc-nZg; j++) {
	 
         // formulate matrix elements for J update
         // a*Jx^n+1 + b*Jz^n+1 = e
         // c*Jx^n+1 + d*Jz^n+1 = f
         //
         a = 1.0+thisdt*thisdt*N(i,j)/epsilon0/delta0;
         d = a;
         b = -thisdt/epsilon0*lambda0*By(i,j);
         c = -b;
         detA = a*d-b*c;
         e = Jxold(i,j) + thisdt*N(i,j)/epsilon0*(Exold(i,j)-Ex0(i,j))
           + thisdt*thisdt*N(i,j)/epsilon0/delta0*Jx0(i,j);
         f = Jzold(i,j) + thisdt*N(i,j)/epsilon0*(Ezold(i,j)-Ez0(i,j))
           + thisdt*thisdt*N(i,j)/epsilon0/delta0*Jz0(i,j);
         //
         Jx(i,j) = (e*d - b*f)/detA;
         Jz(i,j) = (f*a - e*c)/detA;
         
         // use new J values to update E
         //
         Ex(i,j) = Exold(i,j) + thisdt/delta0*(Jx0(i,j) - Jx(i,j));
         Ez(i,j) = Ezold(i,j) + thisdt/delta0*(Jz0(i,j) - Jz(i,j));

         }
      }
      if(procID==0) {
         setXminExtrap(Ex,0);
         setXminExtrap(Ez,0);
         setXminExtrap(Jx,0);
         setXminExtrap(Jz,0);
      }
      if(procID==numProcs-1) {
         setXmaxExtrap(Ex, 0);   
         setXmaxBoundary(Ez, 0.0, -1.0);   
         setXmaxExtrap(Jx,0);
         setXmaxExtrap(Jz,0);
      }
      setZboundaryPeriodic(Ex);
      setZboundaryPeriodic(Ez);
      setZboundaryPeriodic(Jx);
      setZboundaryPeriodic(Jz);
      //
      Xgrid.communicate(Ex);
      Xgrid.communicate(Ez);
      Xgrid.communicate(Jx);
      Xgrid.communicate(Jz);


      // compute fluxes using partialy updated fields at n+1/2 for 2nd order
      // or n+1 for 1st order
      computeFluxes(Xgrid, Nsub); // compute second order fluxes at n+1/2

   } // finish subcycle steps for N, M, S, and B

   // update old fields
   Nold = N;
   Mxold = Mx;
   Mzold = Mz;
   Sold = S;
   Byold = By;
   Exold = Ex;
   Ezold = Ez;
   Jxold = Jx;
   Jzold = Jz;
   
   // compute fluxes using fully updated fields at n+1
   computeFluxes(Xgrid, 2);

} // end Physics.advance


void computeFluxes(const domainGrid& Xgrid, const int order)
{

   const int nXcc = Xgrid.nXcc;
   //const int nXce = Xgrid.nXce;
   const int nZcc = Xgrid.nZcc;
   //const int nZce = Xgrid.nZce;

   int procID, numProcs;
   MPI_Comm_rank (MPI_COMM_WORLD, &procID);
   MPI_Comm_size (MPI_COMM_WORLD, &numProcs);
   
   matrix2D<double> FluxNcc_x, FluxMxcc_x, FluxMzcc_x, FluxScc_x, FluxBycc_x;
   matrix2D<double> FluxNcc_z, FluxMxcc_z, FluxMzcc_z, FluxScc_z, FluxBycc_z;
   matrix2D<double> FluxEzcc_x, FluxExcc_z, Cspeed0, Cspeed, Cvac; 
 
   Cspeed0.initialize(nXcc,nZcc,0.0);
   Cspeed.initialize(nXcc,nZcc,0.0);
   double Cvac0 = 1.0/sqrt(delta0);
   Cvac.initialize(nXcc,nZcc,Cvac0);
   FluxNcc_x.initialize(nXcc,nZcc,0.0);
   FluxNcc_z.initialize(nXcc,nZcc,0.0);
   FluxMxcc_x.initialize(nXcc,nZcc,0.0);
   FluxMxcc_z.initialize(nXcc,nZcc,0.0);
   FluxMzcc_x.initialize(nXcc,nZcc,0.0);
   FluxMzcc_z.initialize(nXcc,nZcc,0.0);
   FluxScc_x.initialize(nXcc,nZcc,0.0);
   FluxScc_z.initialize(nXcc,nZcc,0.0);
   FluxBycc_x.initialize(nXcc,nZcc,0.0);
   FluxBycc_z.initialize(nXcc,nZcc,0.0);
   
   FluxEzcc_x.initialize(nXcc,nZcc,0.0);
   FluxExcc_z.initialize(nXcc,nZcc,0.0);

   //  define derived variables
   //
   Vx = Mx/N;
   Vz = Mz/N;
   P  = S*pow(N,gamma0-1.0);
   T  = P/N;
   Cs = sqrt(gamma0*P/N + By*By/N);

   // set flux freezing speed and 
   // compute advection flux at cell center
   //
   Cspeed0  = sqrt(Vx*Vx+Vz*Vz); // adv flux jacobian for magnetic field
   Cspeed   = Cspeed0 + Cs;      // adv flux jacobian for all other variables
   
   FluxNcc_x = rcc*Mx;
   FluxNcc_z = Mz;
   FluxMxcc_x = rcc*(Mx*Vx + P);
   FluxMxcc_z = Mx*Vz;
   FluxMzcc_x = rcc*Mz*Vx;
   FluxMzcc_z = Mz*Vz + P;
   FluxScc_x = rcc*Vx*S;
   FluxScc_z = Vz*S;
   FluxBycc_x = -Ez;
   FluxBycc_z = Ex;
  
   FluxEzcc_x = -rcc*By;
   FluxExcc_z = By;
 
   // compute advective flux using
   // specified scheme from input file
   //
   //
   Nsub = 2; // hard code this for force balance at initiation
   if(advScheme0 == "TVD") {
      Xgrid.computeFluxTVD(FluxN_x, FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxNcc_x, Cspeed,rcc*N, 0,Nsub);
      Xgrid.computeFluxTVD(FluxMx_x,FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxMxcc_x,Cspeed,rcc*Mx,0,Nsub);
      Xgrid.computeFluxTVD(FluxMz_x,FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxMzcc_x,Cspeed,rcc*Mz,0,Nsub);
      Xgrid.computeFluxTVD(FluxS_x, FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxScc_x, Cspeed,rcc*S, 0,Nsub);
      Xgrid.computeFluxTVD(FluxBy_x,FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxBycc_x,Cspeed,By,    0,Nsub);
      Xgrid.computeFluxTVD(FluxEz_x,FluxL_x,FluxR_x,FluxRatio_x,FluxLim_x,
                           FluxEzcc_x,Cvac,  Ez,    0,Nsub);
      //
      Xgrid.computeFluxTVD(FluxN_z, FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxNcc_z, Cspeed,N, 1,Nsub);
      Xgrid.computeFluxTVD(FluxMx_z,FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxMxcc_z,Cspeed,Mx,1,Nsub);
      Xgrid.computeFluxTVD(FluxMz_z,FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxMzcc_z,Cspeed,Mz,1,Nsub);
      Xgrid.computeFluxTVD(FluxS_z, FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxScc_z, Cspeed,S, 1,Nsub);
      Xgrid.computeFluxTVD(FluxBy_z,FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxBycc_z,Cspeed,By,1,Nsub);
      Xgrid.computeFluxTVD(FluxEx_z,FluxL_z,FluxR_z,FluxRatio_z,FluxLim_z,
                           FluxExcc_z,Cvac,  Ex,1,Nsub);
   }
   else {
      Xgrid.InterpToCellEdges(FluxN_x,  FluxNcc_x,  Vx, advScheme0, 0);
      Xgrid.InterpToCellEdges(FluxMx_x, FluxMxcc_x, Vx, advScheme0, 0);
      Xgrid.InterpToCellEdges(FluxMz_x, FluxMzcc_x, Vx, advScheme0, 0);
      Xgrid.InterpToCellEdges(FluxS_x,  FluxScc_x,  Vx, advScheme0, 0);
      Xgrid.InterpToCellEdges(FluxBy_x, FluxBycc_x, Vx, advScheme0, 0);
      Xgrid.InterpToCellEdges(FluxEz_x, FluxEzcc_x, Vx, advScheme0, 0);
      //
      Xgrid.InterpToCellEdges(FluxN_z,  FluxNcc_z,  Vz, advScheme0, 1);
      Xgrid.InterpToCellEdges(FluxMx_z, FluxMxcc_z, Vz, advScheme0, 1);
      Xgrid.InterpToCellEdges(FluxMz_z, FluxMzcc_z, Vz, advScheme0, 1);
      Xgrid.InterpToCellEdges(FluxS_z,  FluxScc_z,  Vz, advScheme0, 1);
      Xgrid.InterpToCellEdges(FluxBy_z, FluxBycc_z, Vz, advScheme0, 1);
      Xgrid.InterpToCellEdges(FluxEx_z, FluxExcc_z, Vz, advScheme0, 1);
   } 

   if(procID==0)  {
      setXminBoundary(FluxN_x,  0.0, 0.0);   
      setXminBoundary(FluxMx_x, 0.0, 0.0);   
      setXminBoundary(FluxMz_x, 0.0, 0.0);   
      setXminBoundary(FluxS_x,  0.0, 0.0);
      //setXminBoundary(FluxBy_x, 0.0, 0.0);
      setXminBoundary(FluxEz_x, 0.0, 0.0);
   }   
   if(procID==numProcs-1)  {
      setXmaxBoundary(FluxN_x,  0.0, 0.0);   
      //setXmaxBoundary(FluxMx_x, (P.at(2)+P.at(1))/2.0, 0.0);   
      setXmaxBoundary(FluxMz_x, 0.0, 0.0);   
      setXmaxBoundary(FluxS_x,  0.0, 0.0);
      setXmaxBoundary(FluxBy_x, 0.0, 0.0);
   }   

   Xgrid.communicate(FluxL_x);   
   Xgrid.communicate(FluxR_x);   
   Xgrid.communicate(FluxRatio_x);   
   Xgrid.communicate(FluxLim_x);   
         
} // end computeFluxes


void setXminBoundary(matrix2D<double>& var, 
		     const double C0, const double C1)
{
   const int thisnZ = var.size1();

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = mesh->nXg;

   for (auto i=0; i<ishift; i++) {
      for (auto j=0; j<thisnZ; j++) {
         var(ishift-i-1,j) = C0 + C1*var(ishift+i,j);
      }
   }

}

void setXminExtrap(matrix2D<double>& var, const int order)
{
   
   const int thisnZ = var.size1();

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = mesh->nXg;

   for (auto j=0; j<thisnZ; j++) {
      if(order==0) {
         var(1,j) = var(2,j);
         var(0,j) = var(2,j);
      }
      else {
         //var(1,j) = 2.0*var(2,j) - var(3,j);
         //var(0,j) = 2.0*var(1,j) - var(2,j);
         var(1,j) = 3.0*(var(2,j) - var(3,j)) + var(4,j);
         var(0,j) = 3.0*(var(1,j) - var(2,j)) + var(3,j);
      }
   }

}

void setXmaxExtrap(matrix2D<double>& var, const int order)
{
   
   const int thisnX = var.size0();
   const int thisnZ = var.size1();

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = thisnX-mesh->nXg;

   for (auto j=0; j<thisnZ; j++) {
      if(order==0) {
         var(ishift,j) = var(ishift-1,j);
         var(ishift+1,j) = var(ishift-1,j);
      }
      else {
         //var(ishift,j)   = 2.0*var(ishift-1,j) - var(ishift-2,j);
         //var(ishift+1,j) = 2.0*var(ishift,j)   - var(ishift-1,j);
         var(ishift,j)   = 3.0*(var(ishift-1,j) - var(ishift-2,j)) + var(ishift-3,j);
         var(ishift+1,j) = 3.0*(var(ishift,j) - var(ishift-1,j)) + var(ishift-2,j);
      }
   }

}

void setXmaxBoundary(matrix2D<double>& var, 
		     const double C0, const double C1)
{
   const int thisnX = var.size0(); 
   const int thisnZ = var.size1(); 

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = thisnX-mesh->nXg;
   
   for (auto i=ishift; i<thisnX; i++) {
      for (auto j=0; j<thisnZ; j++) {
         var(i,j) = C0 + C1*var(2*ishift-i-1,j);
      }
   }
      
}

void setXmaxBy(matrix2D<double>& var, const double exponent)
{
   const int thisnX = var.size0(); 
   const int thisnZ = var.size1(); 

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = thisnX-mesh->nXg;
   vector<double> Xcc = mesh->Xcc;
   
   for (auto i=ishift; i<thisnX; i++) {
      for (auto j=0; j<thisnZ; j++) {
         var(i,j) = var(i-1,j)*pow(Xcc.at(i)/Xcc.at(i-1),exponent);
      }
   }
      
}

void setXminBoundaryEz(matrix2D<double>& var)
{
   //const int thisnX = var.size0(); 
   const int thisnZ = var.size1(); 

   domainGrid* mesh = domainGrid::mesh;
   const int ishift = mesh->nXg;
   
   for (auto j=0; j<thisnZ; j++) {
      var(ishift-1,j) = 4.0/3.0*var(ishift,j) - 1.0/3.0*var(ishift+1,j);
   }
      

}

void setZboundaryPeriodic(matrix2D<double>& var)
{
   
   const int thisnX = var.size0();
   const int thisnZ = var.size1();

   domainGrid* mesh = domainGrid::mesh;
   const int jshift = mesh->nZg;
 
   assert(jshift==2 || jshift==1);

   if(jshift==2) {
      for (auto i=0; i<thisnX; i++) {
         var(i,1) = var(i,thisnZ-3);
         var(i,0) = var(i,thisnZ-4);

         var(i,thisnZ-2) = var(i,2);
         var(i,thisnZ-1) = var(i,3);
      }
   } 
   else { 
      for (auto i=0; i<thisnX; i++) {
         var(i,0) = var(i,thisnZ-2);
         var(i,thisnZ-1) = var(i,1);
      }
   }



}


void Physics::setdtSim(double& dtSim, const timeDomain& tDom, const domainGrid& Xgrid)
{
   int procID;
   MPI_Comm_rank (MPI_COMM_WORLD, &procID);
   
   matrix2D<double> Cchar_x(Cs), Cchar_z(Cs);
   double Cmax_x, Cmax_z, Cmax, Clight;
   Cchar_x += abs(Vx);
   Cchar_z += abs(Vz);
   Cmax_x = max(Cchar_x);
   Cmax_z = max(Cchar_z);
   Cmax = max(Cmax_x,Cmax_z);
   Clight = 1.0/sqrt(delta0);
   //cout << "Cmax = " << Cmax << endl;

   const double dX = Xgrid.dX;
   const double dZ = Xgrid.dZ;
   
   double dtCFL_sound = 0.5*dX*dZ/(dX+dZ)/Cmax;
   double dtCFL_light = 0.5*dX*dZ/(dX+dZ)/Clight;
   double dtmax = min(dtCFL_sound,dtCFL_light); // should always be light
   //double dtmax = dtCFL_sound;
   
   dtSim = min(dtmax/tDom.dtFrac,tDom.dtOut);


   //dtSim = 1.0e-4;
   if(procID==0) {
      cout << "dtSim = " << dtSim << endl;
   }
}

