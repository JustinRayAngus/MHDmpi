/***
 *
 * HDF5 data file class
 *
***/

#ifndef HDF5dataFile_h
#define HDF5dataFile_h

#include "H5Cpp.h"

using namespace std;
#ifndef H5_NO_NAMESPACE
   using namespace H5;
#endif

class HDF5dataFile
{
public:
   void setOutputFile(const string&);
    
   void add(int &intVar, const char *varName, int grow = 0);
   void add(double &sclVar, const char *varName, int grow = 0);
   void add(vector<double> &vecVar, const char *varName, int grow = 0); 
   void add(vector<vector<double>> &vecvecVar, const char *varName, int grow = 0); 
   
   void writeAll(); // appends all growing variables in output file

private:
   string outputFile;
   
   bool varExists(const H5File&, const char*); // probably obsolete now
   bool varAdded(const string &name); 
   
   void writeInt(const int&, const char*, const bool&);   
   void writeScl(const double&, const char*, const bool&);   
   void writeVec(const vector<double>&, const char*, const bool&);  
   void writeVecVec(const vector<vector<double>>&, const char*, const bool&); 
   
   void appendIntInOutput(int*, const char*);
   void appendSclInOutput(double*, const char*);
   void appendVecInOutput(vector<double>*, const char*);
   void appendVecVecInOutput(vector<vector<double>*>*, const char*);

   template<class T>
      struct VarStr {
         T* ptr;
         string name;
         bool grow;
      };
   vector< VarStr<int> > intVar_arr;
   vector< VarStr<double> > sclVar_arr;
   vector< VarStr< vector<double> > > vecVar_arr;
   vector< VarStr< vector<vector<double>> > > vecvecVar_arr;

};


#endif


